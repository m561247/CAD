.TH RPC-CRYSTAL 1OCTTOOLS "12 January 1989"
.SH NAME
.I rpc-crystal
- an RPC interface to the crystal timing analyzer
.SH DESCRIPTION
.I Rpc-crystal
is a remote application program
that can be spawned from a
.IR vem (1OCTTOOLS)
graphics window viewing a symbolic Oct design.
It is an interface layer built on top of
.IR crystal (1OCTTOOLS)
that allows the use of crystal directly on an Oct design.
.I Rpc-crystal
contains commands for building the crystal simulation structures,
editing various properties recognized by the crystal Oct reader,
running delays on nets (or nodes, in crystal terminology),
and viewing the critical delay paths
through the cell.
There is also a command to send a text command
directly to the crystal command interpreter,
so all of the functionality of crystal is available
in
.I rpc-crystal.
.SH "COMMANDS"
These are the commands available in
.I rpc-crystal.
Bracketed arguments indicate that the arguments are optional.
Once
.I rpc-crystal
is running,
all commands can be either typed in
or accessed by the RPC menu,
which is activated by pressing and releasing
the middle mouse button while holding down the <Shift> key.
.sp
None of these commands alter the disk copy of the top level facet.
.I Rpc-crystal,
however,
stores some crystal constructs
(e.g., direction properties, flows, and critical paths)
in the top level facet.
To save any of these edits or results,
the facet must be saved explicitly in
.I vem
(the standard type-in binding for this command is
.IR save-window ).
.SH "GENERAL COMMANDS"
.TP
.B ": crystal-build"
Build a crystal circuit description from a symbolic Oct cell.
The cell is the facet of the window in which
.I rpc-crystal
is running.
Limitations and conventions on the expected
properties and instance types are given below.
.TP
.B "[``text''] : crystal-command"
Send a text command to the standard crystal command interpreter.
When run without the text argument,
a dialog window will pop up giving all possible crystal commands.
The dialog will then allow the user to selected a command
and give additional arguments if necessary.
Use `crystal-ident' to find crystal's node names for unnamed Oct nets.
.TP
.B ": crystal-clear-sel-set"
Clear
.I rpc-crystal's
select set.
This un-highlights anything highlighted by `crystal-critical'.
.TP
.B ": crystal-flush-text"
Flush standard text output steams (stdout, stderr).
The output is written to the shell that is running
.I vem.
This is useful to synchronize and view messages
from crystal and the Oct reader.
.TP
.B "[``rpc command name''] : crystal-help"
Online help facility for all
.I rpc-crystal
commands.
If the command name is given, then help is given
for that command,
otherwise a dialog is entered to pick a command.
A synopsis and description are provided for the selected command.
.TP
.B ": crystal-exit"
Exit
.I rpc-crystal.
As a side effect, the select set is cleared.
.SH "TIMING COMMANDS"
.TP
.B "object(s) [``HiTime LoTime''] : crystal-delay"
Set the delay time of a crystal node (Oct net).
Objects should be nets or terminals.
In the latter case, the delay of the node
corresponding to the net containing the terminal is set.
The string should be the same as the high and low times
specified in crystal's `delay' command.
If no string is given, it defaultts to ``0 0''.
To view the results of a series of delays,
run
.I crystal-critical.
.TP
.B "[``path number''] : crystal-critical"
Store the critical paths in an Oct representation in the top level facet
and then pop up a dialog to allow the user to view the critical paths.
If the path number is given (1 through 5, usually),
that path is used, otherwise
a dialog box allows the user to select a path.
Each path contains a series of stages.
If the user elects not to view the individual stages,
then a textual description of the stages is written to the
.I vem
console window (similar to crystal's `crit' command).
If the user decides to look at the stages of the selected path,
a dialog is poped up to select any one of the stages.
When a stage is selected (by selecting the stage button
and then the `OK' button),
the stage is highlighted,
and then the stage dialog is poped back up.
For more interactive access to the Oct critical path data, run
vem's
`select-bag' or `sel-bag-contents' on the facet
and select the bag named `CRYSTAL_CRITICAL_PATHS'.
.SH "EDIT COMMANDS"
.TP
.B "object(s) : crystal-ident"
Give crystal's internal node name for
the specified net.
Objects should be nets or terms.
In the latter case, the node name corresponding
to the net containing the term is given.
.TP
.B "object(s) ``flow name'' : crystal-create-flow"
Create a flow.
In crystal, a flow is a data flow direction control structure.
Objects should all be actual terminals of `MOSFET' instances.
The terminals must be named either `SOURCE' or `DRAIN'.
If the name is a new flow name,
then a new flow is created and the terminals are added to it,
otherwise, the terminals are added
to the existing flow.
The flow is stored in Oct in a form
recognizable to crystal's Oct reader.
.TP
.B "``flow name'' ``keyword'' : crystal-set-flow-by-name"
Set the named flow to the state specified by keyword.
The flow must already exist.
Legal keywords are `in', `out', `off', `normal', and `ignore'.
See crystal documentation for a description of what each keyword means.
.TP
.B "object(s) ``keyword'' : crystal-set-flow-by-bag"
Same as
.I crystal-set-flow-by-name
except the name of the bag is used as the flow name.
Objects must all be flow bags
(described in `ADDITIONAL OCT CONSTRUCTS', below).
.TP
.B "object(s) ``flow name'' : crystal-delete-from-flow"
Delete objects from an existing flow.
The objects must be contained by the flow bag.
.TP
.B "object(s) ``in|out'' : crystal-set-term-dir"
Add the Oct properties to set the direction of a terminal.
If the object is a formal terminal,
it is set to be either an input or an output.
During the next build command,
an `input' or `output' command will automatically
be issued for the node corresponding to the net
containing that formal terminal.
If the object is a `SOURCE' or `DRAIN'
terminal of a MOSFET instance,
the direction of data flow through that MOSFET
is thus specified.
If the object is a MOSFET instance,
the `SOURCE' terminal is set to the specified direction.
This is equivalent to `In' or `Out' attributes of
a transistor statement in a .sim file.
.B Note:
this command only adds or changes Oct properties;
to reflect this change in crystal,
a build command must be run.
.TP
.B "[object(s)] : crystal-show-term-dir"
Show any direction properties
associated with the given object
that will be recognized by the crystal Oct reader.
Objects should be any terminal (actual or formal),
or MOSFET instances.
If no objects are given,
the direction of each formal terminal is shown.
.SH "OCT POLICY"
.B "Note: all information in this section applies to crystal's Oct reader,"
.B "so it applies to both"
.I rpc-crystal
.B "and terminal-based crystal run with the -oct option."
.sp
.I Rpc-crystal
requires that certain conventions be observed in the Oct description
of the circuit being simulated.
The top level Oct cell must conform to
.I "Oct Symbolic Policy."
It is especially important that the nets be correct.
.I Rpc-crystal
does no extraction for electrical connectivity
based on geometries in the cells.
If geometries are not contained by the same net,
they will wind up in different crystal nodes.
Also,
.I rpc-crystal
does a rough capacitance extraction,
and it is required that all paths contained by nets 
have only two points (as per
.IR "Oct Symbolic Policy" ).
.sp
Instances contained by the top level cell
must be one of five types:
.TP
.B (1)
A transistor cell with all of the following properties:
a `CELLTYPE' string property `MOSFET';
a `MOSFETTYPE' string property of `NDEP', `PDEP', `NENH', `PENH';
and `MOSFETWIDTH' and `MOSFETLENGTH' real properties (in meters).
.TP
.B (2)
A capacitor cell with `CELLTYPE' string property `CAPACITOR'
and a `CAPACITANCE' real property (in farads).
.TP
.B (3)
A resistor cell with `CELLTYPE' string property `RESISTOR'
and a `RESISTANCE' real property (in ohms).
.TP
.B (4)
A physical cell that has a
.I `crystal'
facet of the type built by
.IR sim2facet (1OCTTOOLS).
.TP
.B (5)
A symbolic cell containing instances of (1), (2), (3), (4), and/or (5).
Acceptable `CELLTYPE' properties for symbolic instances are:
`COMBINATIONAL', `MODULE', and `MEMORY'.
If an unknown `CELLTYPE' is found on a symbolic instance,
the type defaults to `MODULE'.
.PP
It is very important to correctly specify
the supply (Vdd) and ground (Vss) nets correctly.
There are two mechanisms for this which are standard
for many of the Oct tools.
In a symbolic cell (with nets),
a string valued property named `NETTYPE' can be attached
to the supply (ground) net in the contents facet.
The value should be `SUPPLY' (`GROUND').
Alternately (and the only possible way in physical cells),
a string valued property named `TERMTYPE' can be attached
to the supply (ground) formal terminal
and given the value `SUPPLY' (`GROUND').
The formal terminal should be in the interface facet,
although currently the crystal Oct reader will check the formal
of the contents facet if no property was found attached
to the interface facet formal.
If both `NETTYPE' and `TERMTYPE' properties exist,
they should match,
but if there is a conflict,
the crystal Oct reader will use the `NETTYPE' value.
.B Note:
Before reading in any instances,
the crystal Oct reader determines the type of all the major nets
(those attached to formal terminals).
If a major net is not specified as supply or ground,
but contains an actual terminal that is specified
within the instance as power or ground,
the results of the parse will probably be wrong,
because crystal needs power and ground
to each be unique, singular nodes.
If this occurs, a warning is issued,
but reading continues.
It is a fatal error to attach supply (ground) valued net
to a ground (supply) valued instance actual terminal.
.SH "ADDITIONAL OCT CONSTRUCTS"
There are data represented in the
.I .sim
file format and simulation constructs in crystal
that don't have obvious mappings to an Oct storage form.
These include
data flow direction of formal and actual terminals,
crystal flows,
critical paths.
and resistance and capacitance on nets,
Here are the conventions used to store these data.
.sp
.B Direction of Terminals
.RS
.TP
Formal Terminals
Setting the direction of a formal terminal is equivalent to
declaring the formal as an input or and output.
Thus, the direction property mechanism is used.
A direction property is a string valued property
named `DIRECTION' and attached to a formal terminal
in the interface facet.
Values of `INPUT' and `OUTPUT' are recognized (case is significant).
If one is found,
an `input' or `output' command is automatically issued by the
crystal Oct reader as part of the last phase of building
the given facet.
.TP
Actual Terminals
There is mechanism in the .sim file format for specifying
a source or drain terminal of a transistor as having a
data flow direction of either in or out.
In Oct, this is represented by a string property
named `DIRECTION' attached to the actual terminal
of the `MOSFET' instance.
As in the .sim attribute mechanism,
the terminal must be either the `SOURCE' or `DRAIN' terminal.
Legal values for the `DIRECTION' property are the same as above.
The effect of this is to allow data flow
through the transistor in only one direction.
.RE
.TP
.B Crystal Flows
A `flow' in crystal is a structure
that allows the user to specify the direction of data flow
through many transistors with a single command
(see crystal documentation for more details).
In the facet that is being simulated (the top level facet in
the circuit hierarchy),
flows can be permanently stored in Oct.
The RPC command
.I crystal-create-flow
will handle all the appropriate Oct conventions automatically,
but for the curious user,
here's how it is stored.
Attached to the facet is a bag called `CRYSTAL_FLOWS'.
This bag contains the flow bags.
Each flow bag has a unique name,
which is used to access and set that flow.
Each flow bag contains `SOURCE' and/or `DRAIN' actual terminals
of `MOSFET' instances.
This Oct structure is equivalent to
a flow attribute on a transistor .sim file format statement.
Additionally,
each flow bag can contain a string property named `CRYSTAL_FLOW_TYPE'.
The value of this string property must be one of the
acceptable key words (see
.IR crystal-set-flow-by-name ).
If this property exists,
during a build command,
a crystal `flow' command will automatically be issued
to set the flow to the specified initial value.
.TP
.B Critical Paths
A description of the critical paths through the facet being simulated
can be represented in Oct and stored permanently
in the facet.
The storage structure can be accessed with the RPC command
.I crystal-critical,
but for the more curious, here's the format.
Attached to the facet is a bag called `CRYSTAL_CRITICAL_PATHS'.
This bag contains a bag for each critical path (currently
between one and five paths are generated by crystal).
The path bags are called `PATH1' though `PATH5'.
Each path bag contains stage bags.
The stage bags names represent the delay to that point.
For example, a stage bag named `4.56ns' means that the
delay to that stage is 4.56 nanoseconds.
Each stage bag contains a net.
The net is the Oct equivalent of the crystal node
that has the delay indicated by the stage bag name.
.B Note:
this can get a little confusing in a hierarchical situation,
because the Oct reader effectively joins nets inside
instances to top-level nets when appropriate.
.I Vem,
however, will not highlight individual parts of instances.
Thus, stage nets that enter instances may look confusing,
and the connection between two adjacent stage nets may
not be obvious if it occurs within an instance.
Also, if a stage net is completely within an instance,
it cannot be graphically displayed.
.B Note 2:
if
.I crystal-critical
is not satisfactory for viewing critical paths,
run it once to store in the facet
the most recent delay results,
the use
.I vem's
bag tree traversing commands
.I select-bag
and
.I sel-bag-contents
to view the structure more directly and interactively.
.TP
.B Capacitance and Resistance on Nets
There are two types of facets that the Oct reader can read:
`contents' of a symbolic view, and a `crystal' facet of a physical view.
If the facet is a `contents' facet,
a simple capacitance extraction is done.
Crystal's capacitance per area constants are used to come up
with a capacitance estimate.
This section of code knows only about
the standard `scmos' technology layers.
This thought to be OK, however,
because parts of crystal are already hard-coded for
a 2-metal CMOS technology.
If the facet is a `crystal' facet,
net capacitance and resistance are found
by properties attached to the net.
Net resistance is stored as a real property named `SIM_RESISTANCE'
with a value in ohms.
This is equivalent to the .sim file format `R' statement.
Net capacitance is stored as 6 separate real properties:
`SIM_DIFF_AREA', `SIM_DIFF_PERIM',
`SIM_POLY_AREA', `SIM_POLY_PERIM',
`SIM_MET_AREA', and `SIM_MET_PERIM'.
This is equivalent to the .sim file format `N' statement,
and the net capacitance value is calculated
from these property values in the same way
as the capacitance is calculated from a `N' statement.
.B Note:
to put a capacitance between two nets,
attach a two terminal capacitor between the nets.
.B Note 2:
all of these properties know to and usually generated by
.I sim2facet.
.SH BUGS
Currently, the accuracy of the absolute delay times
given by
.I rpc-crystal
or crystal run with the -oct option is not known.
However, we believe that the relative delay times
(i.e., the critical paths)
are as accurate as crystal run on a .sim file.
.SH "SEE ALSO"
crystal(1OCTTOOLS),
vem(1OCTTOOLS),
sim2facet(1OCTTOOLS), ~octtools/doc/rpc/rpc.dvi, ~octtools/lib/octPolicy/symbolic.policy
.SH AUTHOR
Andy Wiggin, wiggin@eros.Berkeley.EDU
