aof2201 ao22 2 3 17 14 70000 9240 6822 9240 9240 ; O A1 B1 C2 D2 *
aof2301 ao33 3 3 19 16 70000 8580 4623 8580 8580 8580 8580 ; O A1 B1 C1 D2 E2 F2 *
aof3201 ao222 2 3 17 14 70000 9240 6822 9240 9240 9240 9240 ; O A1 B1 C2 D2 E3 F3 *
aof4201 ao2222 2 3 23 17 70000 10120 5723 9900 9900 10120 10120 10340 10340 ; O A1 B1 C2 D2 E3 F3 G4 H4 *
aoif2201 aoi22 2 2 33 27 70000 8800 2644 8800 8800 ; O A1 B1 C2 D2 *
blf00001 aoi21 2 1 36 38 70000 7260 5942 8360 ; O A1 B2 C2 *
blf00101 oai21 1 2 22 27 70000 9900 6822 9240 ; O A1 B2 C2 *
buff100 himpbuf 4 4 29 26 70000 4840 ; O A1 *
buff101 buffer 1 1 16 16 70000 6820 ; O A1 *
buff121 tristatebuf 0 1 20 10 70000 11440 11450 ; O DATA1 EN2 *
delf011 delaycell ; O A1 *
dfbf311 dffsetreset 3 3 16 14 70000 4 4 37 39 70000 10780 5283 11880 11440 ; Q Q_b DATA1 CLK2 RST3 SET4 *
dfnf311 dff 4 4 58 50 70000 4 3 33 36 70000 9240 6823 ; Q Q_b DATA1 CLK2 *
dfrf301 dffasycreset 1 1 0 0 0 0 0 0 ; Q DATA1 CLK2 RST3 *
dfrf311 dffreset 4 4 16 17 70000 4 4 38 39 70000 9900 6382 9460 ; Q Q_b DATA1 CLK2 RST3 *
faf001 fulladder 5 5 16 16 70000 4 3 20 15 70000 39380 24430 29260 ; SUM CO A1 B1 CIN2 *
invf100 himpinv 1 1 107 106 70000 1540 ; O A1 *
invf101 inv 1 1 26 28 70000 8360 ; O A1 *
invf103 threexinvbuf 1 1 0 0 0 0 ; O A1 *
invf104 fourxinvbuf 0 0 10 9  70000 36080 ; O A1 *
invf201 twoinvert 0 0 26 24 70000 0 0 26 24 70000 9240 ; O1 O2 A1 B2 *
labf111 crosscoupnandlatch 1 1 21 23 70000 1 1 20 41 70000 10780 6383 ; Q Q_b RST1 SET2 *
labf211 crosscoupnorlatch 1 1 20 41 70000 1 1 27 24 70000 10780 8142 ; Q Q_b RST1 SET2 *
larf310 clocklatch 5 4 39 32 70000 4 4 17 14 0 70000 5500 3521 ; Q Q_b DATA1 CLK2 RST3 *
muxf201 twoinpmux 1 2 23 19 70000 6600 4402 14080 ; O A1 B2 SEL3 *
nanf201 nand2 1 1 23 23 70000 10780 6823 ; O A1 B1 *
nanf211 and2nand2 1 1 24 24 700000 2 1 53 55 70000 8800 3524 ; O1 O2 A1 B1 *
nanf251 nimp 2 2 22 23 70000 5500 5063 ; O A1 B2 *
nanf301 nand3 2 2 18 23 70000 12100 6604 12100 ; O A1 B1 C1 *
nanf311 and3nand3 2 2 23 23 70000 2 2 53 46 70000 9900 4843 9900 ; O1 O2 A1 B1 C1 *
nanf401 nand4 2 2 23 26 70000 10120 4844 10120 10120 ; O A1 B1 C1 D1 *
nanf411 and4nand4 3 2 25 26 70000 2 3 58 47 70000 9240 3744 9240 9240 ; O1 O2 A1 B1 C1 D1 *
norf201 nor2 1 1 31 30 70000 8360 6821 ; O A1 B1 *
norf211 or2nor2 2 2 32 29 70000 2 2 56 55 70000 8140 6601 ; O1 O2 A1 B1 *
norf251 imp 1 1 43 32 70000 6160 5061 ; O A1 B2 *
norf301 nor3 2 2 43 36 70000 8140 6821 8140 ; O A1 B1 C1 *
norf311 or3nor3 3 3 42 36 70000 3 3 69 65 70000 7480 6381 7480 ; O1 O2 A1 B1 C1 *
norf401 nor4 2 3 55 45 70000 7700 6821 7700 7700 ; O A1 B1 C1 D1 *
oaif2201 oai22 2 2 35 28 70000 7700 5721 8800 8800 ; O A1 B1 C2 D2 *
orf401 or4 2 4 33 24 70000 9020 6822 9020 9020 ; O A1 B1 C1 D1 *
pudf000 pulldown ; O *
puuf000 pullup ; O *
swcf020 transgate 0 0 3 4 70000 24200 4623 ; O DATA1 CTL2 *
xnof201 nxor2 2 2 21 17 70000 11440 5723 ; O A1 B1 *
xnsf201 statnxor2 1 1 0 0 0 0 0 ; O A1 B1 *
xorf201 xor2 2 2 25 26 70000 9460 6823 ; O A1 B1 *
xosf201 statxor2 1 1 0 0 0 0 0 ; O A1 B1 *
# pads
v4out   v4out  ; pad out *
v4outm  v4outm ; pad out *
v4in    v4in   ; in inb pad *
v4inm   v4inm  ; in inb pad *
v4io    v4io   ; pad in out enable *
v4iom   v4iom  ; pad in out enable *

