			CMOS Enhancements to Crystal
				Richard Kenner
			     New York University
			    KENNER@NYU-CMCL1.ARPA

This file describes changes made at NYU to Crystal.  Most of these changes
enhance support for CMOS.  However, some are generic enhancements not
specifically related to CMOS.

The following CMOS transistor types are defined.  Crystal will automatically
flag a transistor as one of these types when it can detect a special use.
However, they can be explicitly specified by the designer by using a gate
attribute.  The full list of CMOS transistor types is as follows:

nchan & pchan:	These are the types assigned to n- and p-channel transistors
		which are not otherwise specified.  Normally, transistors used
		as parts of restoring logic gates will be these types.
		Both pullup and pulldown effective resistances are defined for
		these types.

ncload: 	An n-channel transistor used as a static pulldown.  Transistors
		marked as nchan are automatically converted to ncload if their
		gate is Vdd and a source/drain terminal is GND.  ncload
		transistors are marked as being always turned on and 
		incapable of transmitting a high signal.

pload:		An p-channel transistor used as a static pullup.  pload is 
		processes and detected analagously to ncload.

The next two transistor types are used to allow Crystal to compute timing
estimates for designs containing a circuit trick enabling the use of 
single-transistor transmission gates.  In this circuit, the transmission gate
is a single n-channel transistor whose output is tied to the input of an
inverter with a lowered Vinv.  The output of this inverter is tied to the gate
of a p-channel transistor used to pull the inverter input all the way to Vdd.
This transistor must be weak to enable the transmission gate to pass a low
value.

The effective resistance parameters for this pass transistor are defined based
on both p-channel transistors having W=L=2, and both n-channel transistors as
having W=3 and L=2.  They also assume that the capacitance of the input and
output of the inverter are roughly equal.  Since the effective switching
resistance of the pass transistor is dependant on the switching speed of
the inverter, timing analysis involving this type of circuit will be less
accurate than usual.  It is recommended that mkcp runs be made to determine a
better set of effective resistances if this circuit style is used with a
different set of assumptions. (It should be pointed out that the recent MOSIS
SCMOS design rule change which does not recommend the use of W=L=2 transistors
for small values of lambda makes the feasibility of this "trick" somewhat
problematical.)

pfeed:	The designer uses a gate attributes to mark the feedback transistor
	in the above configuration as type pfeed.  This is all that needs to be
	specified.  The pfeed transistor is modelled as a transistor which is
	always off.  Crystal uses this transistor for only two things:
	(1) It contributes capacitance to its nodes and (2) it is written to a
	SPICE deck when a critical path which this transistor pulls up is
	analyzed.

nspass:	n-channel transistor used in a single-transistor transmission gate
	configuration (as described above).  If a pfeed transistor is found,
	any nchan transistors which have a gate/source terminal the same as the
	non-Vdd terminal of the pfeed and whose other terminal is not GND, are
	converted to nspass transistors.  Flow is also marked as towards the
	non-Vdd terminal of the pfeed transistor.  Finally, the pfeed
	transistor is marked as a "partner" of the nspass transistor so it
	will be written into a SPICE deck of the critical path.  The designer
	should never mark a transistor explicitly as nspass (the "check"
	command will report such markings).

npass/ppass: These are the n- and p-channel components of a normal CMOS
	transmission gate.  npass can only pass 0's and ppass can only pass
	1's.  The effective switching resistances of these transistors is
	computed by assuming that both tranistors are present and that 
	the gate voltage on the "inactive" transistor is generated with a
	voltage-dependent-voltage source of Vdd minus the gate voltage on the
	"active" transistor.

	A major goal has been to "pair" the appropriate n- and p-channel
	pass transistors together.  This is done for two reasons: (1) to
	be able to output both to a SPICE deck and (2) to be able to use the
	"check" command to verify complementary gate logic levels.

	If a pair of n-channel and p-channel transistors are detected with the
	same source/drain terminals (source and drain are treated
	interchangeably), they are assumed to be a pair of transistors used to
	build a CMOS transmission gate.  Their types are changed to npass and
	ppass, they are marked as "partners" and their flow attributes are
	merged (so they need be specified on only one of the transistors).

	There are two cases where this automatic assignment is insufficient.

	(1) If two or more pairs of n-/p-channel transistors are detected
	between the same nodes, they are correctly marked as npass/ppass
	transistors but they may or may not be "paired" correctly.

	(2) If a transmission-gate-type structure contains more than two
	transistors, Crystal cannot detect that the transistors are being
	used as part of a complementary pass gate.

	To allow accurate delay estimation in such circuits, the designer
	should mark the appropriate pairs of transistors.  The format of 
	the gate attributes has been enhanced to be of the form:
		type:pair-ID
	where the pair-ID is a unique identifier used to identify the
	transmission gate.  This format is only allowed for types of ppass
	and npass.  When a pair of transistors is found with the same pair-ID,
	they are marked as partners and the pair-ID is freed for future use 
	(so that they can be used in repeated cells without having to add a
	qualification mechanism).  Sanity checks are also performed.  If the
	two transistors have a common source/drain terminal, flow direction
	merging is done.

	"check" performs two additional checks related to transmission gates.
	First, it flags any npass or ppass transistors which do not have a
	designated partner.  Crystal will handle these correctly but will not
	be able to write out as good a SPICE deck as otherwise.  Also, the next
	check cannot be performed.

	Second, "check" scans back through possible inverter chains driving the
	two gates of a transmission gate pair.  It searches for nodes in
	common.  If it doesn't find any (or if it finds two at the same level
	of logical inversion), it complains.

	A few remarks about timing analysis of transmission gates:  As stated
	earlier, Crystal assumes that for each type of signal (0 and 1), only
	a single transistor is passing the signal.  However, the effective
	resistances of the transistors are calculated assuming that both
	transistors are turned on at the same time and with the same edge
	speed.  In general, this approximation is fairly accurate.  However,
	if there is a large delay between the signals on the two gates, the
	approximation breaks down.  It is important to note, however, that if
	the delay is very large, it will be detected when the "opposite"
	signal is passed.

	Attempts are made to output as accurate a SPICE deck as possible for
	transmission gate circuits.  However, it is incomplete in one respect.
	Both transistors of an n-/p-channel pair are written to the SPICE deck.
	However, in the case where a transmission gate is the "trigger" of a
	stage and the node driving the gate of its partner is not already 
	present in the SPICE deck, a voltage-controlled-voltage source is added
	to drive that gate with a voltage of Vdd minus the voltage on the other
	gate (the one which is being driven).  Ideally, the circuit fragment
	which drives that transistor should also be written to the SPICE deck.
	(This should also be done for a the gate on the pull-up of an NMOS
	superbuffer.)  However, this is not included in this set of changes.
	If someone decides to do this I (and Berkeley, I'm sure) would be
	interested in the code.

	Another problem that comes up when generating SPICE decks is that in
	the case of "intermediate" pass transistor partners where you haven't
	seen each of its nodes before, you cannot determine the direction of
	information flow through the transistor.  These changes handle this
	by iterating (while checking for non-convergance) and finding one
	flow direction at a time.  This is a bit of a hack and it does seem to
	work in all cases (such as mixed structures containing both "normal"
	and pass transistors) although Crystal does generate accurate timing
	information for such circuits (provided the circuits are electrically
	correct).  Alternate suggestions are appreciated.


The remaining CMOS-related change was to solve the following problems with a
common CMOS structure:

It is common in CMOS to implement qualified clocks by using transmission gates.
Crystal has the following problems with this approach:  

(1) When you turn off the clock (to simulate the other clock phase), Crystal 
often cannot detect that you are also turning off the qualified clocks.

(2) There can be MANY qualified clocks, many of whom can be on in a single
cycle (in a chip designed at NYU, for example, there are 44 of them and 22 will
be turned on each cycle).  Ignoring the "side-capacitance" in this case is bad.

This was solved by adding two new node attributes (see below for a discussion
of node attributes in general) "clock" and "notclock".  The designer can
specify a duty percentage for each node along with the attribute (e.g.,
"clock:50%" or "notclock:.5").  They are used as follows:

(1) When setting node values, if a transistor is found which connects two
nodes marked "clock" ("notclock") and the node is being turned off (on), 
the connecting node is also turned off (on).

(2) In a marking phase executed between determining flow and setting Vdd and
GND, an adjustment of clock capacitance is done.  For each clock (or notclock) 
node, a recursive scan is made for the qualified clocks it can drive.  The
expected number of lines on, the expected total capacitance, and the average
branch capacitance is calculated.  If the expected number of "on" lines is
greater than one and the expeced capacitance is greater than the average 
capacitance, an adjustment is done.  The adjustment consists of adding the 
expected capacitance minus the average capacitance to the capacitance of the 
clock.  The subtraction is necessary because Crystal would overstate the
capacitance of a particular path otherwise.

A number of enhancements were also made to Crystal which were not specifically
added to better support CMOS.

The major enhancement is the addition of support in Crystal for node 
attributes.  If a node attribute is preceeded by the string "Cr:" or
"Crystal:", it is interpreted by Crystal.  The following attributes are now
supported (case is ignored):

(1) clock:n	notclock:n
	The function of these is described in detail above.  n is a
	floating-point value representing the duty cycle of the clock.   It
	may optionally be followed by a percent sign in which case the value is
	divided by 100.

(2) precharged:node	predischarged:node
	These attributes are used by the designer to indicate that a node is
	being precharged or predischarged.  The "node" specified on the
	attribute is a global node which controls when precharging is done.

	Crystal uses these attributes in two ways:

	(a) When the node specified in the attribute (the precharging node)
	is set off (either directly or as a result of some other "set"
	command), the node on which this attribute is placed (the precharged
	node) is marked as precharged or predischarged as appropriate.

	(b) The "check" command will verify that the precharged node is in
	fact precharged (or predischarged, as appropriate) by the precharging
	node.

(3) output	inpus	bus	dynamic
	These attributes set the specified flag on the node.  They are 
	equivalent to specifying the nodename as an argument on the appropriate
	Crystal command.  Input and output are usefull in pad cells where the
	specified node is ALWAYS an input, output, or both.

(4) resistance=n	res=n
	This attribute causes Crystal to ignore the resistance for the
	node as specified by a circuit extractor and use the value of n
	(in ohms) instead.  If multiple values of n are specified for the same
	node, an arbitrary choice is made.

	Two examples of when this attribute is usefull:

	(a) If a signal is transmitted in metal to a large number of cells
	and each cell cuts it down to a poly line which runs an appreciable
	distance, the resistance (and hence the delay) will be overestimated by
	a substantial factor.  The actual resistance to be used is the
	resistance of each poly line divided by the number of cells (because
	Crystal will multiply the resistance by the total node capacitance).

	(b) In several cases, the extractor will vastly overestimate the
	resistance of a node.  The most common case of this is the case of
	a very wide transistor whose drain is composed of a diff-metal cut.
	In this case, the extractor will compute the resistance of the node
	as the transistor width divided by 5 (cut + 1) while the actual
	resistance is essentially zero.

(5) capacitance+n	cap+n
	This attribute adds the specified capacitance (in pfs) to the
	capacitance computed by the extractor and Crystal.  It is usefull in
	pads to indicate the external capacitance expected.

Another enhancement is in the area of node names.  A node name specified is
expanded to a list (which may contain only one entry) of nodenames as
follows:

(1) If the nodename contains a comma-separated list, each entry is expanded
according to the following rules seporately.  (This is used for commands
such as "delay" which syntactically accept only one nodename.)

(2) Constructs of the form <i:j> are expanded to a list of nodes with the
<i:j> construct replaced by each integer between i and j, inclusive. 
Multiple occurrences of this construct are permitted in a single entry.

(3) If an (expanded) entry begins with an asterisk, it is replaced by a
list which contains every node name containing the remaining string.

(4) If an (expanded) entry begins with a slash ("/"), it is replaced by
a list of nodes which are either identicaly to the remaining string or
end in a slash followed by the remaining string.  For example, the
specification		/in<1:2>	is replaced by a list of nodes
which are labelled "in1" or "in2" in any cell of the design.

Two additional commands which print information about a list of nodes
was added:

(1) prdelay prints, for each matching node, the latest known time that a
transition of that node occurs and whether it is a rising or falling
transistion.  The arguments of this command are the same as for prres
and prcap.

(2) prode prints a list of matching nodes, one per line.


The following miscellaneous changes were also made:

(1) 	Transistors whose source and drain terminals are identical are
	treated as capacitors and otherwise ignored.  Transistors where all
	three terminals are identical are completely ignored.

(2)	When transistors of identical types connecting the same three nodes
	are detected, any attributes specified on the transistors are merged.
	In addition, the distinction between the souce and drain terminals is
	ignored in the test for identical transistors.

(3) 	The default value for Vinv is set to Vdd/2 if the technology is
	a cmos technology.

(4)	The default PrintUnits is set to the units specified in the .sim file.

(5)	During initialization (before a .sim file is read),
	Crystal tries to read commands from the files
		~cad/lib/.crystal
		~/.crystal
		./.crystal
	in that order.  Only commands which may be issued at any time or
	commands which change model parameters are allowed in the startup
	files.  The most usefull of these commands are "options", "trans", and
	"model".
