/***********************************************************************
 * Main Module 
 * Filename: musa.c
 * Program: Musa - Multi-Level Simulator
 * Environment: Oct/Vem
 * Date: March, 1989
 * Professor: Richard Newton
 * Oct Tools Manager: Rick Spickelmier
 * Musa/Bdsim Original Design: Russell Segal
 * Organization:  University Of California, Berkeley
 *                Electronic Research Laboratory
 *                Berkeley, CA 94720
 * Routines:
 * Modifications:
 * Note: File is formatted with 4 space tab.
 ***********************************************************************/

#define MAIN_MUSA
#include "musa.h"
#include "oh.h"
#include "options.h"

optionStruct optionList[] = {
    { "c", "seperator", "set the separator character" },
    { "i", "comfile", "command file to be executed on startup" },
    { "o", "file", "output file name" },
    { "w", "thresh", "set the value W/L for weak threshold" },
    { "s", 0, "input is in sim format" },
    { "P", 0, "do pullup optimization" },
    { "M", 0, "merge parallel and series transistors" },
    { "v", 0, "verbose mode" },
    { "m", 0, "obsolete option, see -P and -M" },
    { "p", 0, "obsolete option, see -P and -M" },
    { OPT_RARG, "cell:view (for Oct) or file (for sim)", "" },
    { 0, 0, 0 },
};

/*************************************************************************
 * PARSE_FACET_SPEC
 * Parse the facet specification.
 *
 * Parameters:
 *	arg (char *) - the argument. (Input)
 *	cell (char **) - the cell. (Output)
 *	view (char **) - the view. (Output)
 */
static void parse_facet_spec(arg, cell, view)
	char *arg, **cell, **view;
{
	char *colon;

	if ((colon = strchr(arg, ':')) == NIL(char)) {
		*cell = arg;
	} else {
		*colon = '\0';
		*cell = arg;
		*view = colon+1;
	} /* if... */
} /* parse_facet_spec... */

/**************************************************************************
 * MAIN
 */
main(argc, argv)
int	argc;
char	**argv;
{
    octObject	rootfacet;
    char	*cell, *view;
    int		option;
    int16	iOption = FALSE;
    char	*inputFileName;

    if (progName = strrchr(argv[0],'/')) {
	    progName++;
    } else {
	    progName = argv[0];
    } /* if... */
    errProgramName(progName);
    errCore(TRUE);

    Message(version());
 
    /* get option stuff */

    while ((option = optGetOption(argc, argv)) != EOF) {
	switch (option) {
	    case 'm':
	    case 'p':
		Warning("Ignoring obsolete options: -p -m. See -P and/or -M");
		break;
	    case 'v':
		verbose = TRUE;
		break;
	    case 'c':
		separator = *optarg;
		break;
	    case 'P':
		no_pulls = FALSE;
		break;
	    case 'M':
		no_merge = FALSE;
		break;
	    case 'i':
		iOption = TRUE;
		inputFileName = optarg;
		break;
	    case 'o':
		if ((output_file = fopen(util_tilde_expand(optarg), "w")) == NIL(FILE)) {
		    (void) fprintf(stderr, "Error: Can't open \"%s\"\n", optarg);
		} /* if...  */
		break;
	    case 's':
		sim_format = TRUE;
		break;
	    case 'w':
		weak_thresh = atof(optarg);
		break;
	    default:
		optUsage();
	} /* case... */
    } /* while... */

    displayName = (char *) getenv("DISPLAY");
    InitLists();
    InitAllocs();
    topminst = NIL(minst);
    if (sim_format) {
	if (optind > argc-1) {
	    optUsage();
	} /* if...  */
	while (optind < argc) {
	    if (!yyopenfile(argv[optind++], 0)) {
		    exit(-1);
	    } /* if... */
	    if (update) {
		    (void) fprintf(stderr, "reading ... ");
	    } /* if... */
	    read_sim();
	} /* while... */
    } else {
	if (optind != argc-1) {
	    optUsage();
	} /* if... */
	ohUnpackDefaults(&rootfacet, "r", "::contents");
	if (ohUnpackFacetName(&rootfacet, argv[optind]) != OCT_OK) {
	    optUsage();
	}

	octBegin();
	if (octOpenFacet(&rootfacet) < OCT_OK) {
	    FatalError("Opening input facet ");
	} /* if... */
	if (update) {
	    VerboseMessage("Reading ...");
	} /* if... */
	read_oct(&rootfacet);
	OH_ASSERT(octCloseFacet(&rootfacet));
	octEnd();
    } /* if... */
    if (update) {
	VerboseMessage("... done reading");
    } /* if... */
    if (!no_merge) {
	merge_trans();
    } /* if... */
    init_sched();
    InterInit();
	if (iOption) {
		if ((input_file = fopen(inputFileName, "r")) == NIL(FILE)) {
			(void) fprintf(stderr, "Can't open \"%s\"\n",inputFileName);
		} else {
		    smstack[0].is_macro = FALSE;
		    smstack[0].interactive = FALSE; /* NOTICE!! */
		    smstack[0].u.sr.file = stdin;
		    smstack[0].u.sr.stop = SIM_ANYBREAK;

		    smstack[1].is_macro = FALSE;
		    smstack[1].interactive = FALSE;
		    smstack[1].u.sr.file = input_file;
		    smstack[1].u.sr.stop = SIM_ANYBREAK;
		    smlevel = 1;
		    last_source = smlevel;
		    DisplaySourceStatus ();
		} /* if... */
	} /* if... */
	(void) inter();
	if (theDisp) {
		XCloseDisplay(theDisp);
	} /* if... */
    Message("MUSA Exiting");
    exit(0);
} /* main... */

