%! 
% The following defines procedures assumed and used by program "dvi2ps"
%
% $Header: tex.ps,v 1.13 87/12/14 00:57:00 van Exp $
%
% Original By:  Neal Holtz, Carleton University, Ottawa, Canada
%		<holtz@cascade.carleton.cdn>
%		<holtz%cascade.carleton.cdn@ubc.csnet>
%		June, 1985
% Seriously hacked by Van Jacobson, LBL
%		<van@lbl-csam.arpa>

/TeXDict 200 dict def   % define a working dictionary
TeXDict begin           % start using it.
                        % units are in "dots" (300/inch)
/Resolution 300 def
/Inch  {Resolution mul} def  % converts inches to internal units

/Mtrx 6 array def

%%%%%%%%%%%%%%%%%%%%% Page setup (user) options %%%%%%%%%%%%%%%%%%%%%%%%

% dvi2ps will output coordinates in the TeX system ([0,0] 1" down and in
% from top left, with y +ive downward).  The default PostScript system
% is [0,0] at bottom left, y +ive up.  The Many Matrix Machinations in
% the following code are an attempt to reconcile that. The intent is to
% specify the scaling as 1 and have only translations in the matrix to
% properly position the text.  Caution: the default device matrices are
% *not* the same in all PostScript devices; that should not matter in most 
% of the code below (except for lanscape mode -- in that, rotations of
% -90 degrees resulted in the the rotation matrix [ e 1 ]
%                                                 [ 1 e ]
% where the "e"s were almost exactly but not quite unlike zeros.

/@letter
  { initmatrix
    72 Resolution div dup neg scale          % set scaling to 1.
    310 -3005 translate      % move origin to top (these are not exactly 1"
    Mtrx currentmatrix pop   % and -10" because margins aren't set exactly right)
    /@TeXSave save def
  } def
        % note mode is like letter, except it uses less VM
/@note
  { note initmatrix
    72 Resolution div dup neg scale          % set scaling to 1.
    310 -3005 translate                      % move origin to top
    Mtrx currentmatrix pop
    /@TeXSave save def
  } def

/@landscape
  { letter initmatrix
    72 Resolution div dup neg scale          % set scaling to 1.
    Mtrx currentmatrix 0 0.0 put
    Mtrx 1 -1.0 put
    Mtrx 2 1.0 put
    Mtrx 3 0.0 put
    Mtrx  setmatrix
    300 310 translate                       % move origin to top
    Mtrx currentmatrix pop
    /@TeXSave save def
  } def

/@legal
  { legal initmatrix
    72 Resolution div dup neg scale          % set scaling to 1.
    295 -3880 translate                      % move origin to top
    Mtrx currentmatrix pop
    /@TeXSave save def
  } def

/@manualfeed
   { statusdict /manualfeed true put
   } def

% n @copies -   set number of copies
/@copies
   { /#copies exch def
   } def

%%%%%%%%%%%%%%%%%%%% Procedure Defintions %%%%%%%%%%%%%%%%%%%%%%%%%%

% id @newfont -		initialize a new font dictionary
/@newfont
  { /newname exch def
    newname 7 dict def          % allocate new font dictionary
    newname load begin
        /FontType 3 def
        /FontMatrix [1 0 0 -1 0 0] def
        /FontBBox [0 0 1 1] def
        /BitMaps 128 array def
        /BuildChar {CharBuilder} def
        /Encoding 128 array def
        0 1 127 {Encoding exch /.undef put} for
        end
    newname newname load definefont pop
  } def


% the following is the only character builder we need.  it looks up the
% char data in the BitMaps array, and paints the character if possible.
% char data  -- a bitmap descriptor -- is an array of length 6, of 
%          which the various slots are:

/ch-image {ch-data 0 get} def   % the hex string image
/ch-width {ch-data 1 get} def   % the number of pixels across
/ch-height {ch-data 2 get} def  % the number of pixels tall
/ch-xoff  {ch-data 3 get} def   % number of pixels below origin
/ch-yoff  {ch-data 4 get} def   % number of pixels to left of origin
/ch-tfmw  {ch-data 5 get} def   % spacing to next character

% fontdict ch Charbuilder -     -- image one character
/CharBuilder
  { /ch-code exch def           % save the char code
    /font-dict exch def         % and the font dict.
    /ch-data font-dict /BitMaps get ch-code get def   % get the bitmap
    ch-data null eq not {
	ch-tfmw 0 ch-xoff neg ch-yoff neg
	ch-width ch-xoff sub ch-height ch-yoff sub
	setcachedevice
        ch-width ch-height true [1 0  0 1  ch-xoff ch-yoff]
	{ch-image} imagemask
    } if
} def


% fontdict @sf -        -- make that the current font
/@sf { setfont } def

% in the following, the font-cacheing mechanism requires that
% a name unique in the particular font be generated

% char-data ch @dc -    -- define a new character bitmap in current font
/@dc
  { /ch-code exch def
    dup 0 get
    length 2 lt
      { pop [ <00> 1 1 0 0 8.00 ] } % replace <> with null
    if
    /ch-data exch def
    currentfont /BitMaps get ch-code ch-data put
    % generate a unique name simply from the character code
    currentfont /Encoding get ch-code dup (   ) cvs cvn put
  } def

/@DRAFTF { gsave initmatrix newpath
       /Helvetica-Bold findfont setfont
       (Draft) dup stringwidth pop 8.875 exch div dup 72 mul dup scale
       52.3 rotate 2.5 exch div -.35 translate
       0.95 setgray
       0 0 moveto show
       grestore } def
/@DRAFTM { gsave initmatrix newpath
       /Helvetica-Bold findfont 72 scalefont setfont
       0.95 setgray
       576 702 moveto
       (Draft) stringwidth exch neg exch neg rmoveto
       (Draft) show
       grestore } def

% n @bop0 -              -- begin the char def section of a new page
/@bop0 { pop } def

% n @bop1 -              -- begin a brand new page
/@bop1 { pop Mtrx setmatrix /SaveImage save def } def

/@draft {
    /@bop1
	  { 1 le {@DRAFTF} {@DRAFTM} ifelse
	    Mtrx setmatrix
	    /SaveImage save def
	  } def
} def

% - @eop -              -- end a page
/@eop { showpage SaveImage restore } def

% - @start -            -- start everything
/@start { @letter /@TeXSave save def } def

% - @end -              -- done the whole shebang
/@end { end } def

% x y p -               -- move to position
/p { moveto } bind def

% x r -                 -- move right
/r { 0 rmoveto } bind def

% string s -            -- show the string
/s { show } bind def

% x string m -            -- move right then show string
/m { exch 0 rmoveto show } bind def

% ch c -                -- show the character (code given)
/c { c-string dup 0 4 -1 roll put show } bind def

/c-string ( ) def

% dx dy ru -   -- set a rule (rectangle)
/ru
  { /dy exch neg def    % because dy is height up from bottom
    /dx exch def
    /x currentpoint /y exch def def   % remember current point
    newpath x y moveto
    dx 0 rlineto
    0 dy rlineto
    dx neg 0 rlineto
    closepath fill
    x y moveto
  } bind def

/@MacSetUp
  { userdict /md known  % if md is defined
      { userdict /md get type /dicttype eq      % and if it is a dictionary
	{
	md begin                             % then redefine some stuff
	/letter {} def
	/note {} def
	/legal {} def
	/od{txpose
	    1 0 mtx defaultmatrix dtransform exch atan/pa exch def
	    newpath clippath mark
	    {transform{itransform moveto}}
	    {transform{itransform lineto}}
	    { 6 -2 roll transform
	      6 -2 roll transform
	      6 -2 roll transform
	      { itransform 6 2 roll
		itransform 6 2 roll
		itransform 6 2 roll
		curveto
	      }
	    }
	    {{closepath}}
	    pathforall newpath counttomark array astore /gc xdf
	    pop ct 39 0 put
	    10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if
	}def
	/txpose{
	    pxs pys scale ppr aload pop
	    por {
		noflips {
		    pop exch neg exch translate pop 1 -1 scale
		}if
		xflip yflip and {
		    pop exch neg exch translate 180 rotate 1 -1 scale
		    ppr 3 get ppr 1 get neg sub neg ppr 2 get
		    ppr 0 get neg sub neg translate
		}if 
		xflip yflip not and {
		    pop exch neg exch translate pop 180 rotate
		    ppr 3 get ppr 1 get neg sub neg 0 translate
		}if
		yflip xflip not and {
		    ppr 1 get neg ppr 0 get neg translate
		}if
	    }
	    {
		noflips {
		    translate pop pop 270 rotate 1 -1 scale
		}if
		xflip yflip and {
		    translate pop pop 90 rotate 1 -1 scale
		    ppr 3 get ppr 1 get neg sub neg ppr 2 get
		    ppr 0 get neg sub neg translate
		}if
		xflip yflip not and {
		    translate pop pop 90 rotate ppr 3 get
		    ppr 1 get neg sub neg 0 translate
		}if
		yflip xflip not and {
		    translate pop pop 270 rotate ppr 2 get
		    ppr 0 get neg sub neg 0 exch translate
		}if
	    }ifelse
	    scaleby96 {
		ppr aload pop 4 -1 roll add 2 div 3 1 roll add 2 div 2 copy
		translate .96 dup scale neg exch neg exch translate
	    }if
	}def
	/cp {pop pop showpage pm restore}def
        end
      }if
    } if    
  } def


%!
% All software, documentation, and related files in this distribution of
% psfig/tex are Copyright (c) 1987 Trevor J. Darrell
%
% Permission is granted for use and non-profit distribution of psfig/tex 
% providing that this notice be clearly maintained, but the right to
% distribute any portion of psfig/tex for profit or as part of any commercial
% product is specifically reserved for the author.
%
%
% psfigTeX PostScript Prolog
% $Header: tex.ps,v 1.13 87/12/14 00:57:00 van Exp $
%
/psf$TeXscale { 65536 div } def

/DocumentInitState [ matrix currentmatrix currentlinewidth currentlinecap
currentlinejoin currentdash currentgray currentmiterlimit ] cvx def

%  x y bb-llx bb-lly bb-urx bb-ury startFig -
/startTexFig {
	/psf$SavedState save def
	userdict maxlength dict begin
	currentpoint transform

	DocumentInitState setmiterlimit setgray setdash setlinejoin setlinecap
		setlinewidth setmatrix

	itransform moveto

	/psf$ury exch psf$TeXscale def
	/psf$urx exch psf$TeXscale def
	/psf$lly exch psf$TeXscale def
	/psf$llx exch psf$TeXscale def
	/psf$y exch psf$TeXscale def
	/psf$x exch psf$TeXscale def
	
	currentpoint /psf$cy exch def /psf$cx exch def

	/psf$sx psf$x psf$urx psf$llx sub div def 	% scaling for x
	/psf$sy psf$y psf$ury psf$lly sub div def	% scaling for y

	psf$sx psf$sy scale			% scale by (sx,sy)

	psf$cx psf$sx div psf$llx sub
	psf$cy psf$sy div psf$ury sub translate
	
	/DefFigCTM matrix currentmatrix def

	/initmatrix {
		DefFigCTM setmatrix
	} def
	/defaultmatrix {
		DefFigCTM exch copy
	} def

	/initgraphics {
		DocumentInitState setmiterlimit setgray setdash 
			setlinejoin setlinecap setlinewidth setmatrix
		DefFigCTM setmatrix
	} def

	/showpage {
		initgraphics
	} def
	@MacSetUp
} def

% llx lly urx ury doclip -	(args in figure coordinates)
/doclip {
	currentpoint 6 2 roll
	newpath 4 copy
	4 2 roll moveto
	6 -1 roll exch lineto
	exch lineto
	exch lineto
	closepath clip
	newpath
	moveto
} def

% - endTexFig -
/endTexFig { end psf$SavedState restore } def


%%%% Additions by LA Carr to reencode Adobe fonts as TeX fonts (almost)
%%%% Based on routine in LaserWriter Cookbook
/ReEncodeForTeX
  { /newfontname exch def
    /basefontname exch def
    /TeXstr 30 string def

    /basefontdict basefontname findfont def
    /newfont basefontdict maxlength dict def
    basefontdict
      { exch dup /FID ne
	  { dup /Encoding eq
	    { exch dup length array copy
	        newfont 3 1 roll put }
	    { exch newfont 3 1 roll put }
	    ifelse
	  }
	{ pop pop }
	ifelse
      } forall

      basefontdict /MathFontName known not
        { 
	  /TeXvec basefontname TeXstr cvs (Courier) search
	    { pop pop pop TeXcourvec }
	    { pop TeXnormalvec }
	  ifelse def
          TeXvec aload pop

          TeXvec length 2 idiv
	    { newfont /Encoding get 3 1 roll put }
	  repeat
	}
      if

      newfontname newfont definefont pop
  } def

/TeXnormalvec
	[ 8#014 /fi 8#015 /fl 8#020 /dotlessi 8#022 /grave 8#023 /acute
	  8#024 /caron 8#025 /breve 8#026 /macron 8#027 /ring 8#030 /cedilla
	  8#031 /germandbls 8#032 /ae 8#033 /oe 8#034 /oslash 8#035 /AE
	  8#036 /OE 8#037 /Oslash 8#042 /quotedblright 8#074 /exclamdown
	  8#076 /questiondown 8#134 /quotedblleft 8#136 /circumflex
	  8#137 /dotaccent 8#173 /endash 8#174 /emdash 8#175 /hungarumlat
	  8#176 /tilde 8#177 /dieresis ] def
/TeXcourvec
	[ 8#016 /exclamdown 8#017 /questiondown 8#020 /dotlessi 8#022 /grave
	  8#023 /acute 8#024 /caron 8#025 /breve 8#026 /macron 8#027 /ring
	  8#030 /cedilla 8#031 /germandbls 8#032 /ae 8#033 /oe 8#034 /oslash
	  8#035 /AE 8#036 /OE 8#037 /Oslash 8#074 /less 8#076 /greater
	  8#134 /backslash 8#136 /circumflex 8#137 /underscore 8#173 /braceleft
	  8#174 /bar 8#175 /braceright 8#177 /dieresis ] def

/TeXPSmakefont {	% defines a routine for generating PS fonts, fudged!
	/TeXsize exch def findfont 
	[ TeXsize 0 0 TeXsize neg 0 0 ] makefont
} def

% fontname basefontname angle ObliqueFont -
% Create a General Oblique font
/ObliqueFont {
    /ObliqueAngle exch def
    /ObliqueBaseName exch def
    /ObliqueFontName exch def
    /ObliqueTransform [1 0 ObliqueAngle sin ObliqueAngle cos div 1 0 0] def
    /basefontdict ObliqueBaseName findfont ObliqueTransform makefont def
    /newfont basefontdict maxlength dict def
    basefontdict
      { exch dup /FID ne
	  { dup /Encoding eq
	    { exch dup length array copy
	        newfont 3 1 roll put }
	    { exch newfont 3 1 roll put }
	    ifelse
	  }
	{ pop pop }
	ifelse
      } forall

     newfont /FontName ObliqueFontName put
     ObliqueFontName newfont definefont
     pop
} def

% Palatino-ItalicUnslanted? You must be joking!

% fontname basename SmallCapsFont -	Create a General SmallCaps font
/SmallCapsFont {
    /SmallCapsBaseName exch def
    /SmallCapsFontName exch def
    /basefontdict SmallCapsBaseName findfont def
    /newfont basefontdict maxlength 10 add dict def

    newfont begin
	/FontName SmallCapsFontName def
	/FontBaseDict basefontdict 1000 scalefont def
	/FontSCDict FontBaseDict .8 scalefont def
	/FontType 3 def
	/BuildChar {SmallCapChar} def
	/FontMatrix dup basefontdict exch get def
	/FontBBox dup basefontdict exch get def
	/Encoding dup basefontdict exch get def
    end
    SmallCapsFontName newfont definefont pop
} def

% fontdict ch SmallCapChar -
% It shouldn't be so damn hard to do this (make one font out
% of two others) but I tried several dozen variations on this
% theme until I found something that worked. -- vj
/SmallCapChar {
    /achar (A) def
    achar exch 0 exch put
    begin
    achar 0 get dup 97 ge exch 122 le and {
	% handle 'a' through 'z' specially
	achar 0 achar 0 get 32 sub put
	FontSCDict
    } {
	FontBaseDict
    } ifelse
    setfont achar stringwidth FontBBox setcachedevice
    newpath 0 0 moveto achar show
    end
} def

/MathEncodingVec [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon1
/Phi /Psi /Omega /alpha /beta /gamma /delta /epsilon
/zeta /nu /theta /iota /kappa /lambda /mu /nu
/xi /pi /rho /sigma /tau /upsilon /phi /chi
/psi /omega /epsilon /theta1 /omega1 /rho /sigma /phi1
/arrowleft /arrowleft /arrowright /arrowright
/suchthat /congruent /proportional /angle
/zero /one /two /three /four /five /six /seven
/eight /nine /period /comma /less /slash /greater /asteriskmath
/partialdiff /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /registerserif /copyrightserif /trademarkserif /logicalor /logicaland
/section /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /dotlessi /j /weierstrass /macron /breve
] def

% the following gives the character codes of the above characters
% in their font.  I.e., this is the character we have to hand "show"
% to image the characters above.
/MathCharVec [
	71	68	81	76	88	80	83	161
	70	89	87	97	98	103	100	101
	122	110	113	105	107	108	109	110
	120	112	114	115	116	117	102	99
	121	119	101	74	118	114	115	106
	172	172	174	174	39	64	181	208
	48	49	50	51	52	53	54	55
	56	57	46	44	60	47	62	42
	182	65	66	67	68	69	70	71
	72	73	74	75	76	77	78	79
	80	81	82	83	84	85	86	87
	88	89	90	210	211	212	218	217
	167	97	98	99	100	101	102	103
	104	105	106	107	108	109	110	111
	112	113	114	115	116	117	118	119
	120	121	122	245	106	195	197	198
] def

% this array tells which font dictionary holds each character above
% (0 = basefont, 1 = symbol (maybe slanted), 2 = symbol (unslanted)).
/MathDictVec [
	1 1 1 1 1 1 1 1
	1 1 1 1 1 1 1 1
	1 1 1 1 1 1 1 1
	1 1 1 1 1 1 1 1
	1 1 1 1 1 1 1 1
	2 2 2 2 2 2 2 2
	0 0 0 0 0 0 0 0
	0 0 0 0 2 2 2 2
	2 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0
	0 0 0 2 2 2 2 2
	2 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0
	0 0 0 0 0 0 0 0
	0 0 0 0 0 2 0 0
] def


% fontname basename symbolname symbolbase angle MathOblique -
% Create a "math" font with the symbol font characters slanted
% by "angle"
/MathOblique {
    3 copy ObliqueFont
    pop pop MathFont
} def
    

% fontname basename symbolname MathFont -	Create a math italic font
%
% We build this font out of the base font & the symbol font
% using an encoding vec as close as we can get to cmmi10 with
% standard postscript characters.  An array parallel to the
% encoding vector tells which font dictionary to use for a
% particular character.
/MathFont {
    /MathSymName exch def
    /MathBaseName exch def
    /MathFontName exch def
    /basefontdict MathBaseName findfont def
    /newfont basefontdict maxlength 10 add dict def

    newfont begin
	/FontName MathFontName def
	/FontDictArray [
	    basefontdict 1000 scalefont
	    MathSymName findfont 950 scalefont
	    /Symbol findfont 950 scalefont
	   ] def
	/FontType 3 def
	/BuildChar {MathFontChar} def
	/FontMatrix dup basefontdict exch get def
	/FontBBox dup basefontdict exch get def
	% the encoding vector is a copy of the original font's
	% encoding, modified "appropriately".
	/Encoding dup basefontdict exch get dup length array copy def
	/WhichFont MathDictVec def
	/WhichChar MathCharVec def
	MathEncodingVec Encoding copy pop
	/achar (A) def
    end
    MathFontName newfont definefont pop
} def

% fontdict ch MathFontChar -
% (there's some serious magic going on here:  see note on 
% SmallCapChar above -- vj).
/MathFontChar {
    exch begin
    achar exch 0 exch put
    FontDictArray WhichFont achar 0 get get get setfont
    achar dup 0 get WhichChar exch get 0 exch put
    achar stringwidth FontBBox setcachedevice
    newpath 0 0 moveto achar show
    end
} bind def

/@flushfonts { @TeXSave restore /@TeXSave save def} def

end                     % revert to previous dictionary
TeXDict begin @start
%%Title: assurance.dvi
%%Creator: dvi2ps
%%EndProlog
1 @bop0
/Times-Roman /t-rom.300 ReEncodeForTeX /t-rom.300 /t-rom.300 41.666629 TeXPSmakefont def
/Times-Bold /t-bol.300 ReEncodeForTeX /t-bol.300 /t-bol.300 41.666629 TeXPSmakefont def
1 @bop1
t-rom.300 @sf 1224 387 p (Address)s
11(of)m
10(your)m
10(or)m
(ganization)s
1224 495 p (Date)s
220 630 p (Department)s
11(of)m
10(Electrical)m
11(Engineering)m
10(and)m
11(Computer)m
10(Sciences)m
220 680 p (University)s
9(of)m
10(California)m
10(at)m
10(Berkeley)m
220 730 p (Berkeley)s
-2 r 44 c
11(CA)m
10(94720)m
220 779 p (USA)s
220 916 p (Dear)s
11(Department)m
11(of)m
11(Electrical)m
11(Engineering)m
10(and)m
10(Computer)m
10(Sciences:)m
t-bol.300 @sf 220 995 p ([Name)s
14(of)m
15(Organization)m
14(or)m
15(Institution])m
t-rom.300 @sf 14(hereby)m
15(assures)m
15(the)m
15(University)m
13(of)m
14(California)m
14(that)m
220 1045 p (the)s
13(software)m
13(and)m
13(documentation)m
13(provided)m
12(hereunder)m
13(or)m
13(any)m
13(immediate)m
14(product)m
12(\(including)m
220 1095 p (processes)s
10(and)m
8(services\))m
9(produced)m
8(directly)m
7(by)m
8(use)m
8(of)m
8(the)m
8(software)m
8(and/or)m
8(documentation)m
7(is)m
8(not)m
220 1145 p (intended)s
8(to)m
8(and)m
8(will)m
7(not)m
8(be)m
9(shipped,)m
9(either)m
8(directly)m
8(or)m
8(indirectly)m
-2 r 44 c
7(to)m
8(Afghanistan,)m
9(the)m
8(People')m
-1 r 115 c
220 1195 p (Republic)s
13(of)m
14(China,)m
15(or)m
13(any)m
14(country)m
14(listed)m
13(in)m
13(Country)m
13(Group)m
13(Q,)m
15(S,)m
14 r 87 c
-3 r 44 c
14 r 89 c
-4 r 44 c
13(or)m
14(Z,)m
14(as)m
15(speci\014ed)m
220 1244 p (in)s
13(Part)m
13(770)m
13(of)m
13(the)m
13(Export)m
13(Administration)m
11(Regulations)m
13(of)m
13(the)m
13(United)m
13(States)m
13(Department)m
14(of)m
220 1294 p (Commerce,)s
13(as)m
11(of)m
10(May)m
11(30,)m
10(1989.)m
t-bol.300 @sf 220 1373 p ([Name)s
10(of)m
9(Organization)m
10(or)m
10(Institution])m
t-rom.300 @sf 10(hereby)m
10(further)m
9(assures)m
11(the)m
10(University)m
9(of)m
9(California)m
220 1423 p (that)s
9(the)m
10(software)m
10(and)m
9(documentation)m
10(provided)m
8(hereunder)m
11(or)m
9(any)m
10(immediate)m
10(product)m
9(\(includ-)m
220 1473 p (ing)s
10(processes)m
13(and)m
11(services\))m
12(produced)m
11(directly)m
10(by)m
11(use)m
11(of)m
11(the)m
11(software)m
11(and/or)m
10(documentation)m
220 1523 p (will)s
10(not)m
10(be)m
11(made)m
12(available)m
11(to)m
11(or)m
10(for)m
11(use)m
11(by)m
11(or)m
10(for)m
11(military)m
10(or)m
10(police)m
11(entities)m
10(of)m
11(the)m
11(Republic)m
220 1572 p (of)s
12(South)m
11(Africa)m
13(or)m
11(Namibia)m
13(and)m
12(that)m
12(the)m
12(apartheid-enforcing)m
11(entities)m
12(identi\014ed)m
11(in)m
11(Part)m
13(785)m
220 1622 p (of)s
9(the)m
8(Export)m
9(Administration)m
7(Regulations)m
8(of)m
8(the)m
9(United)m
8(States)m
10(Department)m
9(of)m
9(Commerce,)m
11(as)m
220 1672 p (of)s
10(May)m
11(30,)m
10(1989.)m
220 1751 p (Licensee)s
14(agrees)m
14(to)m
11(abide)m
13(by)m
11(any)m
13(new)m
12(Export)m
12(Administration)m
10(Regulations)m
11(regarding)m
12(the)m
12(re-)m
220 1801 p (export)s
9(of)m
10(technical)m
11(data)m
10(as)m
11(well)m
10(as)m
10(the)m
10(use)m
11(of)m
10(technical)m
10(data)m
11(by)m
9(the)m
10(Republic)m
10(of)m
9(South)m
10(Africa)m
220 1850 p (and)s
9(Namibia)m
10(issued)m
9(by)m
8(the)m
9(United)m
9(States)m
9(Department)m
10(of)m
9(Commerce)m
11(subsequent)m
9(to)m
8(execution)m
220 1900 p (of)s
12(the)m
13(License)m
14(Agreement.)m
22(Regulations)m
11(and)m
13(information)m
11(may)m
14(be)m
13(obtained)m
12(from)m
12(the)m
13(Of)m
(\014ce)s
220 1950 p (of)s
13(Export)m
13(Administration,)m
13(International)m
12 r 84 c
(rade)s
13(Administration,)m
13(Department)m
14(of)m
13(Commerce,)m
220 2000 p 87 c
-2(ashington,)m
9(DC)m
10(20230.)m
220 2079 p (The)s
10(provisions)m
8(of)m
9(this)m
9(letter)m
9(of)m
9(assurance)m
11(shall)m
9(survive)m
9(and)m
10(continue)m
9(after)m
9(any)m
10(termination)m
8(of)m
220 2129 p (any)s
11(agreement)m
12(under)m
10(which)m
10(the)m
10(software)m
11(and)m
11(documentation)m
10(are)m
11(provided.)m
978 2228 p (Sincerely)s
-2 r 44 c
978 2440 p (Signed)s
10(by)m
10(member)m
12(of)m
10(your)m
10(or)m
(ganization)s
@eop
@end
